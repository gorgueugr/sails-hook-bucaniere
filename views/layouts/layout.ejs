<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bucaniere | Admin Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
    #notification {
      position: fixed;
      top: 20px;
      right: 20px;
      visibility: hidden;
      opacity: 0;
      transition: all 0.6s;
      z-index: 50;
    }
    .menu-list li .icon {
      vertical-align: text-top;
      margin-right: 0.5em;
    }

    tr:hover .table__actions {
      visibility: visible;
    }
    .table__actions {
      visibility: hidden;
      position: sticky;
      right: 0px;
      white-space: nowrap;
    }
    </style>
  </head>

  <body>
    <section class="section">
      <div class="container">
        <div class="columns">
          <div class="column is-one-third-tablet is-one-quarter-widescreen is-one-fifth-fullhd">
            <%- partial('./menu') %>
          </div>

          <div class="column is-two-thirds-tablet is-three-quarters-widescreen is-four-fifths-fullhd">
            <%- body %>
          </div>
        </div>

        <div id="notification" class="notification"></div>
      </div>
    </section>

    <script>
      const notification = document.querySelector('#notification')

      function notify (msg, success = true) {
        notification.innerText = msg
        notification.style.visibility = 'visible'
        notification.style.opacity = 0.85
        notification.className = 'notification ' + (success ? 'is-success' : 'is-danger')

        setTimeout(() => {
          notification.style.visibility = 'hidden'
          notification.style.opacity = 0
        }, 5000);
      }

      function debounce(func, wait, immediate) {
        var timeout;
        return function() {
          var context = this, args = arguments;
          var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) func.apply(context, args);
        };
      };

      function bulmahead (input, menuEl, api, onSelect, delay = 250, minLen = 2) {
        menuEl.innerHTML = '<div class="dropdown-content"></div>'

        const setValue = e => {
          e.preventDefault()
          var label = e.target.text
          var value = e.target.dataset.value
          input.value = value
          menuEl.style.display = 'none'
          if (onSelect) {
            onSelect({ label, value })
          }
          return false
        }

        const handleApi = e => {
          const value = e.target.value
          menuEl.style.display = 'none'
          menuEl.innerHTML = '<div class="dropdown-content"></div>'
          if (value.length <= minLen) {
            return
          }
          api(value).then(suggestions => {
            if (suggestions && suggestions.length > 0) {
              menuEl.style.display = 'block'
            } else {
              menuEl.style.display = 'none'
              return
            }

            const suggestionsEl = suggestions.map(({ label, value }) => {
              const a = document.createElement('a')
              a.href = '#'
              a.classList.add('dropdown-item')
              a.innerHTML = label
              a.dataset.value = value
              a.addEventListener('click', setValue)
              return a
            })
            suggestionsEl.map(suggEl => {
              menuEl.childNodes[0].appendChild(suggEl)
            })
          })
        }
        input.addEventListener('keyup', debounce(handleApi, delay))
      }
    </script>
  </body>
</html>