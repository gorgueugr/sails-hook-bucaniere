<h1 class="title is-capitalized"><%= model %></h1>
<h2 class="subtitle">Total entries: <%= total %></h2>

<button class="button is-primary" onclick="openEditModal()">Create</button>

<div class="table-container">
  <table class="table is-hoverable is-fullwidth is-narrow">
    <thead>
      <tr>
        <% for (let prop in all[0]) { %>
        <th><%= prop %></th>
        <% } %>
        <th colspan="2"><%# Action buttons %></th>
      </tr>
    </thead>

    <tbody>
      <% all.forEach((item, index) => { %>
      <tr>
        <% for (let prop in item) { %>
        <td><%= item[prop] %></td>
        <% } %>

        <td><button class="button is-small" onclick="openEditModal(<%= index %>)">Edit</button></td>
        <td><button class="button is-small is-danger" onclick="destroy(<%= index %>)">Delete</button></td>
      </tr>
      <% }) %>
    </tbody>
  </table>
</div>

<div id="modal-edit" class="modal">
  <div class="modal-background" onclick="closeEditModal()"></div>
  <div class="modal-card">
    <header class="modal-card-head">
      <p class="modal-card-title">Edit Item</p>
      <button class="delete" aria-label="close" onclick="closeEditModal()"></button>
    </header>

    <section class="modal-card-body">
      <% for (let name in attributes) {
        const attribute = attributes[name]
        const type = (attribute.model || attribute.type === 'number') ? 'number' : 'text'
        const disabled = attribute.autoMigrations.autoIncrement ||
          attribute.autoUpdatedAt ||
          attribute.autoCreatedAt %>
      <div class="field is-horizontal">
        <div class="field-label is-normal">
          <label class="label"><%= name %></label>
        </div>
        <div class="field-body">
          <div id="attribute-<%= name %>" class="field">
            <div class="control">
              <input class="input" type="<%= type %>" name="<%= name %>" <%= disabled ? 'disabled' : '' %>>
            </div>
            <p class="help"><%= attribute.required ? 'Required' : '' %></p>
          </div>
        </div>
      </div>
      <% } %>
    </section>

    <footer class="modal-card-foot">
      <button class="button is-success" onclick="save(event)">Save changes</button>
      <button class="button" onclick="closeEditModal()">Cancel</button>
    </footer>
  </div>
</div>

<script>
const editModal = document.querySelector('#modal-edit')
const model = '<%= model %>'

function openEditModal (itemIndex) {
  editModal.classList.add('is-active')

  const item = itemIndex !== undefined ? SAILS_LOCALS.all[itemIndex] : null
  for (let attribute in SAILS_LOCALS.attributes) {
    document.querySelector(`#attribute-${attribute} input`).value = item ? item[attribute] : ''
  }
}

function closeEditModal () {
  editModal.classList.remove('is-active')
}

function save (event) {
  event.target.classList.add('is-loading')
  event.target.disabled = true

  let data = { _csrf: window.SAILS_LOCALS._csrf }
  document.querySelectorAll('#modal-edit input').forEach(input => {
    if (input.disabled) { return true }
    const isNumber = input.getAttribute('type') === 'number'
    data[input.getAttribute('name')] = isNumber ? parseInt(input.value) || 0 : input.value
  })

  const id = document.querySelector('#modal-edit input[name="id"]').value

  fetch(`/${model}/${id}`, {
      method: id ? 'PATCH' : 'POST',
      headers: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })
    .then(notify('Model successfully saved'))
    .catch(err => {
      notify('Can\'t save model (see console)', false)
      console.error(err)
    })
    .then(() => {
      event.target.classList.remove('is-loading')
      event.target.disabled = false
    })
}

function destroy (event, itemIndex) {
  const item = SAILS_LOCALS.all[itemIndex]

  event.target.classList.add('is-loading')
  event.target.disabled = true

  fetch(`/${model}/${item.id}`, {
      method: 'DELETE',
      headers: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': 'application/json'
      }
    })
    .then(notify('Model successfully deleted'))
    .catch(err => {
      notify('Can\'t delete model (see console)', false)
      console.error(err)
    })
    .then(() => {
      event.target.classList.remove('is-loading')
      event.target.disabled = false
    })
}
</script>

<%- exposeLocalsToBrowser() %>